// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String
  email                  String          @unique
  createdAt              DateTime        @default(now())
  
  friendshipsInitiated   Friendship[]    @relation("FriendshipsInitiated")
  friendshipsReceived    Friendship[]    @relation("FriendshipsReceived")
  friendRequestsSent     FriendRequest[] @relation("SentRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedRequests")
}

model FriendRequest {
  id         Int @id @default(autoincrement())
  senderId   Int
  receiverId Int

  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Friendship {
  id              Int      @id @default(autoincrement())
  userIdInitiated Int
  userIdReceived  Int
  createdAt       DateTime @default(now())

  userInitiated User @relation("FriendshipsInitiated", fields: [userIdInitiated], references: [id], onDelete: Cascade)
  userReceived  User @relation("FriendshipsReceived", fields: [userIdReceived], references: [id], onDelete: Cascade)

  @@unique([userIdInitiated, userIdReceived])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
